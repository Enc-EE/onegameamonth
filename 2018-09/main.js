!function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(o,i,function(t){return e[t]}.bind(null,i));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);var o=function(){function e(){var e=this;this.animations=[],this.updates=[],this.resize=function(){console.log("canvas resizing"),e.canvas.width=e.canvas.clientWidth,e.canvas.height=e.canvas.clientHeight},this.isRunning=!1,this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)},this.addView=function(t){e.addAnimatable(t),t.width=e.width,t.height=e.height},this.removeView=function(t){e.removeAnimatable(t)},this.fps=40,this.fpsInterval=1e3/this.fps,this.animate=function(){e.isRunning&&requestAnimationFrame(e.animate);var t=Date.now(),n=t-e.lastFrameTime;if(n>e.fpsInterval){e.lastFrameTime=t;for(var o=n/1e3,i=0,r=e.updates;i<r.length;i++){(0,r[i])(o)}e.ctx.clearRect(0,0,e.canvas.width,e.canvas.height);for(var a=0,s=e.animations;a<s.length;a++){(0,s[a])(e.ctx,e.canvas.width,e.canvas.height)}}}}return Object.defineProperty(e.prototype,"width",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),e.createInBody=function(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var n=new e;return n.canvas=t,n.ctx=t.getContext("2d"),document.addEventListener("keyup",function(e){80==e.keyCode&&n.playPause(),console.log(e.keyCode)}),n.startAnimation(),n.resize(),window.addEventListener("resize",n.resize),n},e.prototype.startAnimation=function(){console.log("start animation"),this.isRunning=!0,this.lastFrameTime=Date.now(),this.animate()},e.prototype.stopAnimation=function(){console.log("stop animation"),this.isRunning=!1},e.prototype.playPause=function(){this.isRunning?this.stopAnimation():this.startAnimation()},e}(),i=function(){return function(){var e=this;this.animations=[],this.updates=[],this.isVisible=!0,this.update=function(t){if(e.isVisible)for(var n=0,o=e.updates;n<o.length;n++)(0,o[n])(t)},this.draw=function(t,n,o){if(e.isVisible)for(var i=0,r=e.animations;i<r.length;i++)(0,r[i])(t,n,o)},this.show=function(){e.isVisible=!0},this.hide=function(){e.isVisible=!1},this.addAnimation=function(t){e.animations.push(t)},this.removeAnimation=function(t){e.animations.splice(e.animations.indexOf(t),1)},this.addUpdate=function(t){e.updates.push(t)},this.removeUpdate=function(t){e.updates.splice(e.updates.indexOf(t),1)},this.addAnimatable=function(t){e.updates.push(t.update),e.animations.push(t.draw)},this.removeAnimatable=function(t){e.updates.splice(e.updates.indexOf(t.update),1),e.animations.splice(e.animations.indexOf(t.draw),1)}}}(),r=function(){function e(e,t,n,o,i){var r=this;this.controller=e,this.onShow=t,this.onAdd=n,this.onRemove=o,this.start=i,this.isShown=!1,this.isAdded=!1,this.addTimerSeconds=1.5,this.removeTimerSeconds=2.5,this.rememberedX=0,this.rememberedY=0,this.location=0,this.update=function(e){r.isShown?r.isAdded?(r.angle=r.angle+Math.PI/9,r.angle=r.angle%(2*Math.PI),r.x=r.rememberedX+25*r.controller.xAxes,r.y=r.rememberedY+25*r.controller.yAxes,r.controller.yAxes>.3?(r.addTimer+=r.controller.yAxes*e,r.addTimer>=r.removeTimerSeconds&&(r.addTimer=0,r.isShown=!1,r.isAdded=!1,r.onRemove(r))):r.controller.yAxes<.1&&(r.addTimer=0),r.controller.start&&(console.log("start"),r.start())):r.controller.yAxes<-.3?(r.addTimer-=r.controller.yAxes*e,r.addTimer>=r.addTimerSeconds&&(r.onAdd(r),r.isAdded=!0,r.addTimer=0)):r.controller.yAxes>-.1&&(r.addTimer=0,r.isShown=!1,r.onRemove(r)):r.controller.yAxes<-.3&&(r.onShow(r),r.isShown=!0,r.addTimer-=r.controller.yAxes*e)},this.draw=function(e,t,n){if(r.location>0){console.log(r.location);var o="black",i=0,a=0;switch(r.location){case 1:o="red",i=t/3,a=(n-100)/3+100;break;case 2:o="green",i=t/3*2,a=(n-100)/3+100;break;case 3:o="blue",i=t/3,a=(n-100)/3*2+100;break;case 4:o="orange",i=t/3*2,a=(n-100)/3*2+100}r.color=o,r.x=i,r.y=a,r.rememberedX=i,r.rememberedY=a,r.location=0}e.fillStyle=r.color,e.save(),e.translate(r.x,r.y),r.isAdded&&(e.save(),e.rotate(r.angle),e.fillRect(-25,-25,50,50),e.restore()),r.isShown&&!r.isAdded&&e.fillRect(-25,35,50/r.addTimerSeconds*r.addTimer,10),r.isShown&&r.isAdded&&r.addTimer>0&&e.fillRect(-25,35,50-50/r.removeTimerSeconds*r.addTimer,10),e.restore()},this.color="black",this.x=0,this.y=0,this.angle=0,this.addTimer=0}return Object.defineProperty(e.prototype,"controllerName",{get:function(){return this.controller.name},enumerable:!0,configurable:!0}),e}(),a=function(){return function(e,t,n,o,i,r){var a=this;this.name=e,this.xAxes=0,this.yAxes=0,this.start=!1,document.addEventListener("keydown",function(e){e.keyCode==n&&(a.xAxes=-1),e.keyCode==t&&(a.yAxes=-1),e.keyCode==i&&(a.xAxes=1),e.keyCode==o&&(a.yAxes=1),13==e.keyCode&&(a.start=!0),e.keyCode==r&&(a.a=!0)}),document.addEventListener("keyup",function(e){e.keyCode==n&&(a.xAxes=-1)&&(a.xAxes=0),e.keyCode==t&&(a.yAxes=-1)&&(a.yAxes=0),e.keyCode==i&&(a.xAxes=1)&&(a.xAxes=0),e.keyCode==o&&(a.yAxes=1)&&(a.yAxes=0),13==e.keyCode&&(a.start=!1),e.keyCode==r&&(a.a=!1)})}}(),s=function(){function e(e,t){this.name=e,this.index=t}return Object.defineProperty(e.prototype,"xAxes",{get:function(){return navigator.getGamepads()[this.index].axes[0]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"yAxes",{get:function(){return navigator.getGamepads()[this.index].axes[1]},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"start",{get:function(){return navigator.getGamepads()[this.index].buttons[9].pressed},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"a",{get:function(){return navigator.getGamepads()[this.index].buttons[0].pressed},enumerable:!0,configurable:!0}),e}(),d=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),l=function(e){function t(t){var n=e.call(this)||this;n.start=t,n.menuBlades=[],n.controllers=[],n.gamepads={},n.showMenuBlade=function(e){console.log(e.controllerName),n.menuBlades.length<=4?(n.menuBlades.push(e),e.location=n.menuBlades.length):console.log("Sorry, only 4 controllers supported")},n.addController=function(e){n.controllers.push(e.controller),console.log("added controller "+e.controllerName)},n.removeControllerAndMenuBlade=function(e){n.menuBlades.splice(n.menuBlades.indexOf(e),1),n.controllers.splice(n.controllers.indexOf(e.controller),1),console.log("removed controller "+e.controllerName);for(var t=0;t<n.menuBlades.length;t++){n.menuBlades[t].location=t+1}},n.connecthandler=function(e){console.log("gamepad connected: "+e.gamepad.index+"/"+e.gamepad.id),n.addgamepad(e.gamepad)},n.scangamepads=function(){console.log("scangamepads");for(var e=navigator.getGamepads?navigator.getGamepads():[],t=0;t<e.length;t++)e[t]&&(console.log("scanned gamepad: "+e[t].index+"/"+e[t].id),e[t].index in n.gamepads?n.gamepads[e[t].index]=e[t]:n.addgamepad(e[t]))},n.disconnecthandler=function(e){console.log("gamepad disconnected: "+e.gamepad.index+"/"+e.gamepad.id),n.removegamepad(e.gamepad)},n.removegamepad=function(e){console.log("removing gamepad: "+e.index+"/"+e.id),delete n.gamepads[e.index];for(var t=0;t<n.menuBlades.length;t++){if(n.menuBlades[t].controllerName==e.index.toString()){n.menuBlades.splice(t,1);break}}},n.addgamepad=function(e){console.log("adding gamepad: "+e.index+"/"+e.id),n.gamepads[e.index]=e;var t=new r(new s(e.index.toString(),e.index),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,n.start);n.addAnimatable(t)};var o="ongamepadconnected"in window;n.addAnimation(function(e,t,n){e.fillStyle="black",e.textAlign="center",e.font="22px sans-serif",e.fillText("You can control a blade with a gamepad, the arrow keys (and +) or WASD (and q).",t/2,50),e.fillText("Press up to join and down to leave.",t/2,80),e.fillText("Press enter on keyboard or start on a controller to start.",t/2,110)});var i=new r(new a("arrows",38,37,40,39,187),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,t);n.addAnimatable(i);var d=new r(new a("wasd",87,65,83,68,81),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,t);n.addAnimatable(d);var l=new r(new a("tfgh",84,70,71,72,82),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,t);n.addAnimatable(l);var c=new r(new a("ijkl",73,74,75,76,85),n.showMenuBlade,n.addController,n.removeControllerAndMenuBlade,t);return n.addAnimatable(c),window.addEventListener("gamepadconnected",n.connecthandler),window.addEventListener("gamepaddisconnected",n.disconnecthandler),console.log("haveEvents: "+o),o||(n.gamepadScanner=setInterval(n.scangamepads,500)),n}return d(t,e),t.prototype.unload=function(){clearInterval(this.gamepadScanner)},t}(i),c=function(){function e(e){var t=this;this.controller=e,this.update=function(e){if(t.rotations>0){var n=t.rotations/1e3*e*Math.PI*2;t.angle=t.angle+n,t.angle=t.angle%(2*Math.PI),t.controller.a?t.powerUpCurrent>0?(t.f=t.powerUpF,t.powerUpCurrent-=e):t.f=t.fStart:(t.f=t.fStart,t.powerUpCurrent<t.powerUpStart&&(t.powerUpCurrent+=e,t.powerUpCurrent>t.powerUpStart&&(t.powerUpCurrent=t.powerUpStart)));var o=.5*t.A*t.cw*t.p*t.vx*Math.abs(t.vx),i=.5*t.A*t.cw*t.p*t.vy*Math.abs(t.vy),r=t.f*t.controller.xAxes-o/t.m,a=t.f*t.controller.yAxes-i/t.m;t.vx+=r*e,t.vy+=a*e,t.x+=t.vx*e,t.y+=t.vy*e}},this.draw=function(e,n,o){t.scorePosition?t.drawScore(e,n,o):(t.drawInfo(e,n,o),t.drawBlade(e))},this.iMDone=function(e){},this.x=0,this.y=0,this.vx=0,this.vy=0,this.angle=0,this.m=.1,this.f=463,this.fStart=463,this.powerUpF=2*this.f,this.powerUpStart=2,this.powerUpCurrent=this.powerUpStart,this.r=25,this.startRotations=2124,this.rotations=this.startRotations,this.A=.01,this.cw=.05,this.p=1}return e.prototype.collision=function(){var e=24+(this.vx*this.vx+this.vy*this.vy)/1492;this.rotations-=e,this.rotations<0&&(this.rotations=0,this.iMDone(this))},e.prototype.drawScore=function(e,t,n){e.fillStyle=this.getBladeColor(),e.font="76px sans-serif";var o=this.scorePosition.toString()+".";switch(this.bladeNumber){case 1:e.textBaseline="top",e.textAlign="left",e.fillText(o,30,30);break;case 2:e.textBaseline="top",e.textAlign="right",e.fillText(o,t-30,30);break;case 3:e.textBaseline="bottom",e.textAlign="left",e.fillText(o,30,n-30);break;case 4:e.textBaseline="bottom",e.textAlign="right",e.fillText(o,t-30,n-30)}},e.prototype.drawBlade=function(e){if(this.rotations>0){e.save(),e.translate(this.x,this.y),e.rotate(this.angle);var t=Math.sqrt(this.r*this.r/2);e.fillRect(-t,-t,2*t,2*t),e.restore()}},e.prototype.drawInfo=function(e,t,n){var o=this.rotations/this.startRotations*t/4,i=this.powerUpCurrent/this.powerUpStart*t/4;switch(e.fillStyle="rgba(148, 0, 211, 0.6)",(this.bladeNumber<1||this.bladeNumber>4)&&console.log("error?"),this.bladeNumber){case 1:e.fillRect(0,30,i,20);break;case 2:e.fillRect(t,30,-i,20);break;case 3:e.fillRect(0,n-30,i,-20);break;case 4:e.fillRect(t,n-30,-i,-20)}switch(e.fillStyle=this.getBladeColor(),this.bladeNumber){case 1:e.fillRect(0,0,o,30);break;case 2:e.fillRect(t,0,-o,30);break;case 3:e.fillRect(0,n,o,-30);break;case 4:e.fillRect(t,n,-o,-30)}},e.prototype.getBladeColor=function(){switch(this.bladeNumber){case 1:return"red";case 2:return"green";case 3:return"blue";case 4:return"orange";default:return"black"}},e}(),h=function(){function e(e,t,n){var o=this;this.blades=e,this.borderRight=t,this.borderBottom=n,this.update=function(e){for(var t=0;t<o.blades.length;t++){var n=o.blades[t];o.wallCollision(n);for(var i=0;i<o.blades.length;i++)if(!(i<=t)){var r=o.blades[i],a=r.x-n.x,s=r.y-n.y,d=Math.sqrt(a*a+s*s);d<=2*n.r&&(console.log("collision"),o.positionCorrection(d,n,a,s,r),o.collisionV2(s,a,n,r))}}},this.draw=function(e,t,n){}}return e.prototype.wallCollision=function(e){e.x-e.r<0?(e.vx=-e.vx,e.x=e.r-e.x+e.r,e.collision()):e.x+e.r>this.borderRight&&(e.vx=-e.vx,e.x=this.borderRight-(e.x+e.r-this.borderRight)-e.r,e.collision()),e.y-e.r<0?(e.vy=-e.vy,e.y=e.r-e.y+e.r,e.collision()):e.y+e.r>this.borderBottom&&(e.vy=-e.vy,e.y=this.borderBottom-(e.y+e.r-this.borderBottom)-e.r,e.collision())},e.prototype.collisionV2=function(e,t,n,o){var i=Math.sqrt(t*t+e*e),r=2*n.vx*n.m,a=2*n.vy*n.m,s=Math.sqrt(r*r+a*a),d=t/i*s,l=e/i*s,c=3*o.vx*o.m,h=3*o.vy*o.m,u=Math.sqrt(c*c+h*h),p=-t/i*u,m=-e/i*u;o.vx+=d/o.m,o.vy+=l/o.m,n.vx+=p/n.m,n.vy+=m/n.m},e.prototype.positionCorrection=function(e,t,n,o,i){var r=(e-2*t.r)/2/e,a=r*n,s=r*o;t.x+=a,t.y+=s,i.x-=a,i.y-=s},e}(),u=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),p=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.started=!1,t.blades=[],t.bladeIsDone=function(e){console.log("blade is done, score: "+t.scorePosition),e.scorePosition=t.scorePosition,t.scorePosition--},t}return u(t,e),t.prototype.start=function(e){if(!this.started){this.started=!0,this.addAnimation(function(e,t,n){e.fillStyle="rgb(191, 191, 191)",e.textAlign="center",e.font="62px sans-serif",e.fillText("Don't hit the border ;)",t/2,n/2-20)}),console.log(e),this.scorePosition=e.length;for(var t=0;t<e.length;t++){var n=e[t],o=new c(n),i=0,r=0;switch(t+1){case 1:i=this.width/3,r=this.height/3;break;case 2:i=this.width/3*2,r=this.height/3;break;case 3:i=this.width/3,r=this.height/3*2;break;case 4:i=this.width/3*2,r=this.height/3*2}o.bladeNumber=t+1,o.x=i,o.y=r,o.iMDone=this.bladeIsDone,this.blades.push(o),this.addAnimatable(o)}this.addAnimatable(new h(this.blades,this.width,this.height))}},t}(i),m=function(){function e(){var e=this;this.start=function(){e.menu.hide(),e.menu.unload(),e.game.show(),e.game.start(e.menu.controllers)}}return e.prototype.run=function(){this.animation=o.createInBody(),this.menu=new l(this.start),this.game=new p,this.animation.addView(this.menu),this.animation.addView(this.game),this.game.hide()},e}();document.addEventListener("DOMContentLoaded",function(){(new m).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,